{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","peticion","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","height","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EAhCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAiBvC,OACE,cAAC,WAAD,UACE,sBACEC,SAZe,SAACC,GACpBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMd,SAGE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SArBkB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,e,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAEmCC,UAAUH,GAF7C,6BACJ,oCADI,SAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVnB,kBAaZM,GAbY,4CAAH,sDCiBLO,EAfK,SAAC,GAAkB,IAAjBb,EAAgB,EAAhBA,IAAKU,EAAW,EAAXA,MACzB,OACE,cAAC,WAAD,UACE,sBAAKI,UAAU,OAAf,UACE,qBACEC,IAAKf,EACLgB,IAAKN,EACLO,OAAQ,MAEV,4BAAIP,UCgBGQ,EAvBC,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECDJ,SAACA,GAAc,IAAD,EAEdd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WAERzB,EAAQC,GACLyB,MAAK,SAAAC,GAASH,EAAS,CACtBhB,KAAMmB,EACNL,SAAS,SAGZ,CAACrB,IAEGsB,EDdwBK,CAAa3B,GAA/Ba,EAFiB,EAEvBN,KAAcc,EAFS,EAETA,QAErB,OACE,eAAC,WAAD,WACE,6BAAKrB,IACJqB,GAAW,cACZ,qBAAKL,UAAU,YAAf,SACGH,EAAOJ,KAAI,gBAAEE,EAAF,EAAEA,GAAIT,EAAN,EAAMA,IAAKU,EAAX,EAAWA,MAAX,OACV,cAAC,EAAD,CAEED,GAAIA,EACJT,IAAKA,EACLU,MAAOA,GAHFD,YEgBFiB,EA3BM,WAAM,MAGW1C,mBAClC,CAAC,KAJsB,mBAGlB2C,EAHkB,KAGN5C,EAHM,KAOzB,OACE,eAAC,WAAD,WACE,8CACA,cAAC,EAAD,CACEA,cAAeA,IAEjB,uBAEA,6BACG4C,EAAWpB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CACEA,SAAUA,GACLA,Y,MClBjB8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.15450947.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\n\nconst AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if(inputValue.trim().length > 0){\n      setCategories(cats => [inputValue, ...cats])\n      setInputValue('');\n    }\n  }\n\n  return (\n    <Fragment>\n      <form\n        onSubmit={handleSubmit}\n      >\n        <input\n          type='text'\n          value={inputValue}\n          onChange={handleInputChange}\n        />\n      </form>\n    </Fragment>\n   );\n}\n \nexport default AddCategory;","export const getGifs = async (category) => {\n    const apiKey = 'eUjP98P63gJOtf5ZS6lswbhD5dKlnl8b'\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${apiKey}`;\n    const peticion = await fetch(url);\n    const {data} = await peticion.json();\n\n    const gifs = data.map(img => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n      }\n    })\n    return gifs;\n  }","import React, { Fragment } from 'react';\n\nconst GifGridItem = ({url, title}) => {\n  return ( \n    <Fragment>\n      <div className='card'>\n        <img\n          src={url}\n          alt={title}\n          height={240}\n        />\n        <p>{title}</p>\n      </div>\n    </Fragment>\n   );\n}\n \nexport default GifGridItem;","import { Fragment } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({category}) => {\n\n  const {data: images, loading}= useFetchGifs(category)\n\n  return ( \n    <Fragment>\n      <h3>{category}</h3>\n      {loading && 'Cargando...'}\n      <div className='card-grid'>\n        {images.map(({id, url, title}) => (\n          <GifGridItem\n            key={id}\n            id={id}\n            url={url}\n            title={title}\n          />\n        ))}\n      </div>\n\n    </Fragment>\n   );\n}\n \nexport default GifGrid;","import {useState, useEffect} from 'react';\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    \n    getGifs(category)\n      .then(imgs => {setState({\n        data: imgs,\n        loading: false\n        })\n      })\n  }, [category])\n\n  return state; // {data: [], loading: true};\n\n}","import React, { Fragment, useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\nconst GifExpertApp = () => {\n\n  //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n  const [categories, setCategories] = useState(\n    ['']\n  )\n\n  return (\n    <Fragment>\n      <h2>GifExpertApp</h2>\n      <AddCategory\n        setCategories={setCategories}\n      />\n      <hr/>\n\n      <ol>\n        {categories.map(category => (\n          <GifGrid \n            category={category}\n            key={category}\n          />\n        ))}\n      </ol>\n    </Fragment>\n   );\n}\n \nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './assets/css/index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}